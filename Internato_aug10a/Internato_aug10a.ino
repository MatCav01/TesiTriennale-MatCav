#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Internato"
  https://create.arduino.cc/cloud/things/2d565902-e115-4886-a820-39f943e39ad8 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humidity;
  float temperature;
  int motor_direction;
  int motor_speed;
  bool motor_switch;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

// DHT sensor library for ESPx - Version: Latest 
#include <DHTesp.h>

#include "thingProperties.h"

DHTesp dht_sensor;
const int dht_sensor_pin = 2;
unsigned long measure_interval = 2000;
unsigned long last_measure = millis();

const int motor_enable = 5;
const int motor_dirA = 19;
const int motor_dirB = 18;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  dht_sensor.setup(dht_sensor_pin, DHTesp::DHT11);
  
  pinMode(motor_enable, OUTPUT);
  pinMode(motor_dirA, OUTPUT);
  pinMode(motor_dirB, OUTPUT);
  
  analogWrite(motor_enable, 0);
  digitalWrite(motor_dirA, HIGH);
  digitalWrite(motor_dirB, LOW);
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  if (millis() - last_measure > measure_interval)
  {
    temperature = dht_sensor.getTemperature();
    humidity = dht_sensor.getHumidity();
    last_measure = millis();
  }
}


/*
  Since MotorSpeed is READ_WRITE variable, onMotorSpeedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMotorSpeedChange()  {
  // Add your code here to act upon MotorSpeed change
  if (motor_switch)
  {
    analogWrite(motor_enable, motor_speed);
  }
}

/*
  Since MotorSwitch is READ_WRITE variable, onMotorSwitchChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMotorSwitchChange()  {
  // Add your code here to act upon MotorSwitch change
  if (motor_switch)
  {
    analogWrite(motor_enable, motor_speed);
  }
  else
  {
    analogWrite(motor_enable, 0);
  }
}

/*
  Since MotorDirection is READ_WRITE variable, onMotorDirectionChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMotorDirectionChange()  {
  // Add your code here to act upon MotorDirection change
  if (motor_direction == 0) // forward
  {
    digitalWrite(motor_dirA, HIGH);
    digitalWrite(motor_dirB, LOW);
  }
  else if (motor_direction == 1) // reverse
  {
    digitalWrite(motor_dirA, LOW);
    digitalWrite(motor_dirB, HIGH);
  }
}
